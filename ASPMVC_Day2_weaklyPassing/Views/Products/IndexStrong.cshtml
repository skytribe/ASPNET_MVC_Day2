@*This will cast the model type to the IndexViewModel so when I use Model in foreach it will be strongly typed.*@

@model ASPMVC_Day2_PassingData.Models.ProductViewModel


@{
    var TotalPrice = 0m;
    }


<h2>Strong Typed approach using a strongly type </h2>


<table style="width:100%">

    @foreach (var product1 in this.Model.Products )
    {
        // This approach requires me to set colors using C# code in view - I would duplicate this in
        // each view that needed to do this.
        
        @*<tr style="background-color: @(product1.OnSale ? "lightgreen":"white") ">*@
        //This approach will use a method in the ProductViewModel Class
            

        <tr style="background-color: @(this.Model.DisplayColor(product1.OnSale)) ">

            <td>
                @product1.Name
            </td>
            <td>
                @product1.Price
            </td>
   

        </tr>

        TotalPrice = TotalPrice + product1.Price;

    }
</table>
</br></br>
<text>Total Price :</text>@TotalPrice


